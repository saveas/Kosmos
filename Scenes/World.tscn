[gd_scene load_steps=21 format=2]

[ext_resource path="res://Scenes/Spaceship.tscn" type="PackedScene" id=1]
[ext_resource path="res://Scripts/World.gd" type="Script" id=3]
[ext_resource path="res://Assets/level_spritemap.png" type="Texture" id=4]
[ext_resource path="res://Scripts/HealthBar.gd" type="Script" id=5]
[ext_resource path="res://Scripts/XPBar.gd" type="Script" id=6]

[sub_resource type="StyleBoxFlat" id=11]
bg_color = Color( 1, 0, 0, 1 )

[sub_resource type="StyleBoxFlat" id=12]
bg_color = Color( 0.290196, 0.560784, 0, 1 )

[sub_resource type="Shader" id=2]
code = "/*
Godot 3 2D CRT Shader.
A 2D shader for Godot 3 simulating a CRT..

Author: hiulit
Repository: https://github.com/hiulit/Godot-3-2D-CRT-Shader
Issues: https://github.com/hiulit/Godot-3-2D-CRT-Shader/issues
License: MIT https://github.com/hiulit/Godot-3-2D-CRT-Shader/blob/master/LICENSE
*/

shader_type canvas_item;

const float PI = 3.14159265359;

uniform vec2 screen_size = vec2(320.0, 180.0);
uniform bool show_curvature = true;
uniform float curvature_x_amount : hint_range(3.0, 15.0, 0.01) = float(6.0); 
uniform float curvature_y_amount : hint_range(3.0, 15.0, 0.01) = float(4.0);
uniform vec4 corner_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform bool show_vignette = true;
uniform float vignette_opacity : hint_range(0.0, 1.0, 0.01) = 0.2;
uniform bool show_horizontal_scan_lines = true;
uniform float horizontal_scan_lines_amount : hint_range(0.0, 180.0, 0.1) = 180.0;
uniform float horizontal_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform bool show_vertical_scan_lines = false;
uniform float vertical_scan_lines_amount : hint_range(0.0, 320.0, 0.1) = 320.0;
uniform float vertical_scan_lines_opacity : hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float boost : hint_range(1.0, 2.0, 0.01) = 1.2;
uniform float aberration_amount : hint_range(0.0, 10.0, 0.01) = 0.0;

vec2 uv_curve(vec2 uv) {
	if (show_curvature) {
		uv = uv * 2.0 - 1.0;
		vec2 offset = abs(uv.yx) / vec2(curvature_x_amount, curvature_y_amount);
		uv = uv + uv * offset * offset;
		uv = uv * 0.5 + 0.5;
	}

	return uv;
}


void fragment() {
	vec2 uv = uv_curve(UV);
	vec2 screen_uv = uv_curve(SCREEN_UV);
	vec3 color = texture(SCREEN_TEXTURE, screen_uv).rgb;

	if (aberration_amount > 0.0) {
		float adjusted_amount = aberration_amount / screen_size.x;
		color.r = texture(SCREEN_TEXTURE, vec2(screen_uv.x + adjusted_amount, screen_uv.y)).r;
		color.g = texture(SCREEN_TEXTURE, screen_uv).g;
		color.b = texture(SCREEN_TEXTURE, vec2(screen_uv.x - adjusted_amount, screen_uv.y)).b;
	}

	if (show_vignette) {
		float vignette = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);
		vignette = clamp(pow((screen_size.x / 4.0) * vignette, vignette_opacity), 0.0, 1.0);
		color *= vignette;
	}

	if (show_horizontal_scan_lines) {
		float s = sin(screen_uv.y * horizontal_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, horizontal_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_vertical_scan_lines) {
		float s = sin(screen_uv.x * vertical_scan_lines_amount * PI * 2.0);
		s = (s * 0.5 + 0.5) * 0.9 + 0.1;
		vec4 scan_line = vec4(vec3(pow(s, vertical_scan_lines_opacity)), 1.0);
		color *= scan_line.rgb;
	}

	if (show_horizontal_scan_lines || show_vertical_scan_lines) {
		color *= boost;
	}

	// Fill the blank space of the corners, left by the curvature, with black.
	if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
		color = corner_color.rgb;
	}

	COLOR = vec4(color, 1.0);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/screen_size = Vector2( 320, 180 )
shader_param/show_curvature = true
shader_param/curvature_x_amount = 4.0
shader_param/curvature_y_amount = 4.0
shader_param/corner_color = Color( 0, 0, 0, 1 )
shader_param/show_vignette = true
shader_param/vignette_opacity = 0.3
shader_param/show_horizontal_scan_lines = true
shader_param/horizontal_scan_lines_amount = 180.0
shader_param/horizontal_scan_lines_opacity = 1.0
shader_param/show_vertical_scan_lines = true
shader_param/vertical_scan_lines_amount = 320.0
shader_param/vertical_scan_lines_opacity = 1.0
shader_param/boost = 2.0
shader_param/aberration_amount = 0.68

[sub_resource type="Curve" id=1]
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="ConvexPolygonShape2D" id=4]
points = PoolVector2Array( 21.2244, 31.8568, 11.1637, 32, 10.8611, 0.094101, 21.2244, 0 )

[sub_resource type="ConvexPolygonShape2D" id=5]
points = PoolVector2Array( 10.8931, 10.7265, 11.2968, 0.363266, 21.1217, 0.497864, 20.718, 18.8018, 17.0841, 20.6861, 0.664375, 21.4936, 0.12603, 11.2649 )

[sub_resource type="ConvexPolygonShape2D" id=6]
points = PoolVector2Array( 0.157951, 11.2649, 18.8657, 11.8032, 20.7499, 15.1679, 21.0191, 31.8568, 10.925, 31.7223, 11.1942, 21.4936, 0.427132, 20.9552 )

[sub_resource type="ConvexPolygonShape2D" id=7]
points = PoolVector2Array( 10.9569, 31.8568, 11.2261, 14.0912, 12.9757, 11.8032, 31.5489, 11.5341, 32, 21.2244, 21.051, 20.8206, 20.7818, 31.7223 )

[sub_resource type="ConvexPolygonShape2D" id=8]
points = PoolVector2Array( 21.3521, 0.228683, 21.2175, 10.7265, 31.9846, 11.6687, 31.7154, 21.359, 16.507, 20.9552, 12.2001, 19.7439, 11.3926, 0.228683 )

[sub_resource type="ConvexPolygonShape2D" id=9]
points = PoolVector2Array( 32, 20.8206, 0.388336, 20.8206, 0.388336, 11.2649, 32, 11.2649 )

[sub_resource type="TileSet" id=10]
0/name = "level_spritemap.png 0"
0/texture = ExtResource( 4 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 32, 32 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 4 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 4 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0
1/name = "level_spritemap.png 1"
1/texture = ExtResource( 4 )
1/tex_offset = Vector2( 0, 0 )
1/modulate = Color( 1, 1, 1, 1 )
1/region = Rect2( 32, 0, 32, 32 )
1/tile_mode = 0
1/occluder_offset = Vector2( 0, 0 )
1/navigation_offset = Vector2( 0, 0 )
1/shape_offset = Vector2( 0, 0 )
1/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
1/shape = SubResource( 5 )
1/shape_one_way = false
1/shape_one_way_margin = 1.0
1/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 5 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
1/z_index = 0
2/name = "level_spritemap.png 2"
2/texture = ExtResource( 4 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 64, 0, 32, 32 )
2/tile_mode = 0
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape = SubResource( 6 )
2/shape_one_way = false
2/shape_one_way_margin = 1.0
2/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 6 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
2/z_index = 0
3/name = "level_spritemap.png 3"
3/texture = ExtResource( 4 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 96, 0, 32, 32 )
3/tile_mode = 0
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape = SubResource( 7 )
3/shape_one_way = false
3/shape_one_way_margin = 1.0
3/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 7 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
3/z_index = 0
4/name = "level_spritemap.png 4"
4/texture = ExtResource( 4 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 128, 0, 32, 32 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shape_offset = Vector2( 0, 0 )
4/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
4/shape = SubResource( 8 )
4/shape_one_way = false
4/shape_one_way_margin = 1.0
4/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 8 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
4/z_index = 0
5/name = "level_spritemap.png 5"
5/texture = ExtResource( 4 )
5/tex_offset = Vector2( 0, 0 )
5/modulate = Color( 1, 1, 1, 1 )
5/region = Rect2( 160, 0, 32, 32 )
5/tile_mode = 0
5/occluder_offset = Vector2( 0, 0 )
5/navigation_offset = Vector2( 0, 0 )
5/shape_offset = Vector2( 0, 0 )
5/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
5/shape = SubResource( 9 )
5/shape_one_way = false
5/shape_one_way_margin = 1.0
5/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 9 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
5/z_index = 0

[sub_resource type="Shader" id=13]
code = "/*
	ボロノイ神経風 背景シェーダー by あるる（きのもと 結衣） @arlez80
	Voronoi Synapse-ish Background Shader by Yui Kinomoto @arlez80

	MIT License
*/
shader_type canvas_item;

uniform vec2 pixel_size = vec2( 0.001, 0.001 );

uniform float voronoi_scale = 20.0;
uniform float voronoi_seed = 0.0;

uniform float electric_scale = 20.0;
uniform float electric_speed = 1.0;
uniform float electric_power = 3.0;

vec2 random( vec2 pos )
{ 
	return fract(
		sin(
			vec2(
				dot(pos, vec2(12.9898,78.233))
			,	dot(pos, vec2(-148.998,-65.233))
			)
		) * 43758.5453
	);
}

vec2 voronoi( vec2 uv )
{
	vec2 v = uv * voronoi_scale + vec2( voronoi_seed, voronoi_seed );
	vec2 v_floor = floor( v );
	vec2 v_fract = fract( v );
	vec2 min_p = vec2( 0.0, 0.0 );
	float min_dist = 2.0;

	for( int y = -1; y <= 1; y ++ ) {
		for( int x = -1; x <= 1; x ++ ) {
			vec2 n = vec2( float( x ), float( y ) );
			vec2 p = random( v_floor + n );
			vec2 diff = p + n;
			float d = distance( v_fract, diff );

			min_p = mix( min_p, ( v + diff - v_fract ) / voronoi_scale, float( d < min_dist ) );
			min_dist = min( min_dist, d );
		}
	}

	return min_p;
}

vec2 sobel_coord_conv( vec2 v, int x, int y )
{
	return v + vec2( float( x-1 ), float( y-1 ) ) * pixel_size;
}

float sobel( vec2 uv )
{
	vec2 sobel[9] = {
		voronoi( sobel_coord_conv( uv, 0, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 0 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 1 ) )
	,	vec2( 0.0 )	// 未使用
	,	voronoi( sobel_coord_conv( uv, 2, 1 ) )
	,	voronoi( sobel_coord_conv( uv, 0, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 1, 2 ) )
	,	voronoi( sobel_coord_conv( uv, 2, 2 ) )
	};
	vec2 sobel_src_x = (
		sobel[0] * -1.0
	+	sobel[3] * -2.0
	+	sobel[6] * -1.0
	+	sobel[2] * 1.0
	+	sobel[5] * 2.0
	+	sobel[8] * 1.0
	);
	vec2 sobel_src_y = (
		sobel[0] * -1.0
	+	sobel[1] * -2.0
	+	sobel[2] * -1.0
	+	sobel[6] * 1.0
	+	sobel[7] * 2.0
	+	sobel[8] * 1.0
	);

	return length( sqrt( sobel_src_x * sobel_src_x + sobel_src_y * sobel_src_y ) );
}

float electric( vec2 uv )
{
	return clamp( sobel( uv ) * mod( ( uv.x - uv.y ) * electric_scale / 3.0 - TIME * electric_speed, 1.0 ) * electric_power, 0.0, 1.0 );
}

void fragment( )
{
	float grey = (electric( UV + TIME * 0.1 ) + electric( UV * 0.5 + TIME * 0.1 ) + electric( UV * 0.25 + TIME * 0.1 )) * 0.333;
	COLOR = vec4( grey, grey, grey, 0.3) ;
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/pixel_size = Vector2( 0.001, 0.001 )
shader_param/voronoi_scale = 20.0
shader_param/voronoi_seed = 0.0
shader_param/electric_scale = 20.0
shader_param/electric_speed = 1.0
shader_param/electric_power = 3.0

[sub_resource type="ImageTexture" id=15]
size = Vector2( 500, 500 )

[node name="World" type="Node2D"]
script = ExtResource( 3 )

[node name="Spaceship" parent="." groups=["SpaceShip"] instance=ExtResource( 1 )]
position = Vector2( 298, 271 )

[node name="Camera2D" type="Camera2D" parent="Spaceship"]
current = true

[node name="CanvasLayer" type="CanvasLayer" parent="Spaceship/Camera2D"]

[node name="HealthBar" type="ProgressBar" parent="Spaceship/Camera2D/CanvasLayer"]
margin_left = 48.0
margin_top = 32.0
margin_right = 188.0
margin_bottom = 46.0
rect_scale = Vector2( 3, 3 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_styles/fg = SubResource( 11 )
value = 100.0
script = ExtResource( 5 )

[node name="XPBar" type="ProgressBar" parent="Spaceship/Camera2D/CanvasLayer"]
margin_left = 813.0
margin_top = 32.0
margin_right = 953.0
margin_bottom = 46.0
rect_scale = Vector2( 3, 3 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_styles/fg = SubResource( 12 )
script = ExtResource( 6 )

[node name="ColorRect2" type="ColorRect" parent="Spaceship/Camera2D/CanvasLayer"]
visible = false
margin_right = 1280.0
margin_bottom = 720.0
color = Color( 0.831373, 0.831373, 0.831373, 0.105882 )

[node name="ColorRect" type="ColorRect" parent="Spaceship/Camera2D/CanvasLayer"]
material = SubResource( 3 )
margin_right = 1280.0
margin_bottom = 720.0

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 800, 600 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="ParallaxBackground/ParallaxLayer"]
position = Vector2( 298, 271 )
amount = 100
lifetime = 14.76
preprocess = 15.0
emission_shape = 2
emission_rect_extents = Vector2( 800, 600 )
gravity = Vector2( 0, 0 )
scale_amount = 4.0
scale_amount_random = 1.0
scale_amount_curve = SubResource( 1 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 1.3, 1.3 )
motion_mirroring = Vector2( 800, 600 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="ParallaxBackground/ParallaxLayer2"]
position = Vector2( 298, 271 )
amount = 100
lifetime = 14.76
preprocess = 15.0
emission_shape = 2
emission_rect_extents = Vector2( 800, 600 )
gravity = Vector2( 0, 0 )
scale_amount = 2.0
scale_amount_curve = SubResource( 1 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 1.6, 1.6 )
motion_mirroring = Vector2( 800, 600 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="ParallaxBackground/ParallaxLayer3"]
position = Vector2( 298, 271 )
amount = 100
lifetime = 14.76
preprocess = 15.0
emission_shape = 2
emission_rect_extents = Vector2( 800, 600 )
gravity = Vector2( 0, 0 )
scale_amount = 2.0
scale_amount_curve = SubResource( 1 )

[node name="TileMap" type="TileMap" parent="." groups=["Wall"]]
tile_set = SubResource( 10 )
cell_size = Vector2( 32, 32 )
collision_layer = 16
collision_mask = 9
format = 1
tile_data = PoolIntArray( -917528, 3, 0, -917527, 5, 0, -917526, 5, 0, -917525, 5, 0, -917524, 5, 0, -917523, 5, 0, -917522, 5, 0, -917521, 5, 0, -917520, 5, 0, -917519, 5, 0, -917518, 5, 0, -917517, 5, 0, -917516, 5, 0, -917515, 5, 0, -917514, 5, 0, -917513, 5, 0, -917512, 5, 0, -917511, 5, 0, -917510, 5, 0, -917509, 5, 0, -917508, 5, 0, -917507, 5, 0, -917506, 5, 0, -917505, 5, 0, -983040, 5, 0, -983039, 5, 0, -983038, 5, 0, -983037, 5, 0, -983036, 5, 0, -983035, 5, 0, -983034, 5, 0, -983033, 5, 0, -983032, 5, 0, -983031, 5, 0, -983030, 5, 0, -983029, 5, 0, -983028, 5, 0, -983027, 5, 0, -983026, 5, 0, -983025, 5, 0, -983024, 5, 0, -983023, 5, 0, -983022, 5, 0, -983021, 5, 0, -983020, 5, 0, -983019, 5, 0, -983018, 5, 0, -983017, 5, 0, -983016, 5, 0, -983015, 5, 0, -983014, 5, 0, -983013, 5, 0, -983012, 5, 0, -983011, 5, 0, -983010, 5, 0, -983009, 5, 0, -983008, 5, 0, -983007, 5, 0, -983006, 5, 0, -983005, 5, 0, -983004, 5, 0, -983003, 5, 0, -983002, 5, 0, -983001, 5, 0, -983000, 5, 0, -982999, 5, 0, -982998, 5, 0, -982997, 5, 0, -982996, 5, 0, -982995, 5, 0, -982994, 2, 0, -851992, 0, 0, -917458, 0, 0, -786456, 0, 0, -851922, 0, 0, -720920, 0, 0, -786386, 0, 0, -655384, 0, 0, -720850, 0, 0, -589848, 0, 0, -655314, 0, 0, -524312, 0, 0, -589778, 0, 0, -458776, 0, 0, -524242, 0, 0, -393240, 0, 0, -458706, 0, 0, -327704, 0, 0, -393170, 0, 0, -262168, 0, 0, -327634, 0, 0, -196632, 0, 0, -262098, 0, 0, -131096, 0, 0, -196562, 0, 0, -65560, 0, 0, -131026, 0, 0, -24, 0, 0, -65490, 0, 0, 65512, 0, 0, 46, 0, 0, 131048, 0, 0, 65582, 0, 0, 196584, 0, 0, 131118, 0, 0, 262120, 0, 0, 196654, 0, 0, 327656, 0, 0, 262190, 0, 0, 393192, 0, 0, 327726, 0, 0, 458728, 0, 0, 393262, 0, 0, 524264, 0, 0, 458798, 0, 0, 589800, 0, 0, 524334, 0, 0, 655336, 0, 0, 589870, 0, 0, 720872, 0, 0, 655406, 0, 0, 786408, 0, 0, 720942, 0, 0, 851944, 0, 0, 786478, 0, 0, 917480, 0, 0, 852014, 0, 0, 983016, 0, 0, 917550, 0, 0, 1048552, 0, 0, 983086, 0, 0, 1114088, 0, 0, 1048622, 0, 0, 1179624, 0, 0, 1114158, 0, 0, 1245160, 0, 0, 1179694, 0, 0, 1310696, 0, 0, 1245230, 0, 0, 1376232, 0, 0, 1310766, 0, 0, 1441768, 0, 0, 1376302, 0, 0, 1507304, 0, 0, 1441838, 0, 0, 1572840, 0, 0, 1507374, 0, 0, 1638376, 0, 0, 1572910, 0, 0, 1703912, 0, 0, 1638446, 0, 0, 1769448, 0, 0, 1703982, 0, 0, 1834984, 0, 0, 1769518, 0, 0, 1900520, 0, 0, 1835054, 0, 0, 1966056, 0, 0, 1900590, 0, 0, 2031592, 0, 0, 1966126, 0, 0, 2097128, 4, 0, 2097129, 5, 0, 2097130, 5, 0, 2097131, 5, 0, 2097132, 5, 0, 2097133, 5, 0, 2097134, 5, 0, 2097135, 5, 0, 2097136, 5, 0, 2097137, 5, 0, 2097138, 5, 0, 2097139, 5, 0, 2097140, 5, 0, 2097141, 5, 0, 2097142, 5, 0, 2097143, 5, 0, 2097144, 5, 0, 2097145, 5, 0, 2097146, 5, 0, 2097147, 5, 0, 2097148, 5, 0, 2097149, 5, 0, 2097150, 5, 0, 2097151, 5, 0, 2031616, 5, 0, 2031617, 5, 0, 2031618, 5, 0, 2031619, 5, 0, 2031620, 5, 0, 2031621, 5, 0, 2031622, 5, 0, 2031623, 5, 0, 2031624, 5, 0, 2031625, 5, 0, 2031626, 5, 0, 2031627, 5, 0, 2031628, 5, 0, 2031629, 5, 0, 2031630, 5, 0, 2031631, 5, 0, 2031632, 5, 0, 2031633, 5, 0, 2031634, 5, 0, 2031635, 5, 0, 2031636, 5, 0, 2031637, 5, 0, 2031638, 5, 0, 2031639, 5, 0, 2031640, 5, 0, 2031641, 5, 0, 2031642, 5, 0, 2031643, 5, 0, 2031644, 5, 0, 2031645, 5, 0, 2031646, 5, 0, 2031647, 5, 0, 2031648, 5, 0, 2031649, 5, 0, 2031650, 5, 0, 2031651, 5, 0, 2031652, 5, 0, 2031653, 5, 0, 2031654, 5, 0, 2031655, 5, 0, 2031656, 5, 0, 2031657, 5, 0, 2031658, 5, 0, 2031659, 5, 0, 2031660, 5, 0, 2031661, 5, 0, 2031662, 1, 0 )

[node name="Polygon2D" type="Polygon2D" parent="."]
material = SubResource( 14 )
position = Vector2( 3, 0 )
texture = SubResource( 15 )
polygon = PoolVector2Array( -1440, -840, -1440, 1360, 2216, 1344, 2184, -840, -1440, -840, -757, -469, 1492, -469, 1493, 1015, -758, 1014, -757, -469 )
