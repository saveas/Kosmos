[gd_scene load_steps=19 format=2]

[ext_resource path="res://Scenes/Spaceship.tscn" type="PackedScene" id=1]
[ext_resource path="res://Assets/music.wav" type="AudioStream" id=2]
[ext_resource path="res://Scripts/World.gd" type="Script" id=3]
[ext_resource path="res://Assets/level_spritemap.png" type="Texture" id=4]
[ext_resource path="res://Scripts/HealthBar.gd" type="Script" id=5]
[ext_resource path="res://Scripts/XPBar.gd" type="Script" id=6]

[sub_resource type="StyleBoxFlat" id=11]
bg_color = Color( 1, 0, 0, 1 )

[sub_resource type="StyleBoxFlat" id=12]
bg_color = Color( 0.290196, 0.560784, 0, 1 )

[sub_resource type="Shader" id=2]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/VHS-and-CRT-monitor-effect

This shader is under CC0 license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

//*** IMPORTANT! ***/ 
// - If you are using this shader to affect the node it is applied to set 'overlay' to false (unchecked in the instepctor).
// - If you are using this shader as an overlay, and want the shader to affect the nodes below in the Scene hierarchy,
//   set 'overlay' to true (checked in the inspector).
// On Mac there is potentially a bug causing this to not work properly. If that is the case and you want to use the shader as an overlay
// change all \"overlay ? SCREEN_TEXTURE : TEXTURE\" to only \"SCREEN_TEXTURE\" on lines 129-140, and \"vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV);\"
// to \"vec2 uv = warp(SCREEN_UV);\" on line 98.
uniform bool overlay = false;

uniform float scanlines_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float scanlines_width : hint_range(0.0, 0.5) = 0.25;
uniform float grille_opacity : hint_range(0.0, 1.0) = 0.3;
uniform vec2 resolution = vec2(640.0, 480.0); // Set the number of rows and columns the texture will be divided in. Scanlines and grille will make a square based on these values

uniform bool pixelate = true; // Fill each square (\"pixel\") with a sampled color, creating a pixel look and a more accurate representation of how a CRT monitor would work.

uniform bool roll = true;
uniform float roll_speed = 8.0; // Positive values are down, negative are up
uniform float roll_size : hint_range(0.0, 100.0) = 15.0;
uniform float roll_variation : hint_range(0.1, 5.0) = 1.8; // This valie is not an exact science. You have to play around with the value to find a look you like. How this works is explained in the code below.
uniform float distort_intensity : hint_range(0.0, 0.2) = 0.05; // The distortion created by the rolling effect.

uniform float noise_opacity : hint_range(0.0, 1.0) = 0.4;
uniform float noise_speed = 5.0; // There is a movement in the noise pattern that can be hard to see first. This sets the speed of that movement.

uniform float static_noise_intensity : hint_range(0.0, 1.0) = 0.06;

uniform float aberration : hint_range(-1.0, 1.0) = 0.03; // Chromatic aberration, a distortion on each color channel.
uniform float brightness = 1.4; // When adding scanline gaps and grille the image can get very dark. Brightness tries to compensate for that.
uniform bool discolor = true; // Add a discolor effect simulating a VHS

uniform float warp_amount :hint_range(0.0, 5.0) = 1.0; // Warp the texture edges simulating the curved glass of a CRT monitor or old TV.
uniform bool clip_warp = false;

uniform float vignette_intensity = 0.4; // Size of the vignette, how far towards the middle it should go.
uniform float vignette_opacity : hint_range(0.0, 1.0) = 0.5;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

// Generate a Perlin noise used by the distortion effects
float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

// Takes in the UV and warps the edges, creating the spherized effect
vec2 warp(vec2 uv){
	vec2 delta = uv - 0.5;
	float delta2 = dot(delta.xy, delta.xy);
	float delta4 = delta2 * delta2;
	float delta_offset = delta4 * warp_amount;
	
	return uv + delta * delta_offset;
}

// Adds a black border to hide stretched pixel created by the warp effect
float border (vec2 uv){
	float radius = min(warp_amount, 0.08);
	radius = max(min(min(abs(radius * 2.0), abs(1.0)), abs(1.0)), 1e-5);
	vec2 abs_uv = abs(uv * 2.0 - 1.0) - vec2(1.0, 1.0) + radius;
	float dist = length(max(vec2(0.0), abs_uv)) / radius;
	float square = smoothstep(0.96, 1.0, dist);
	return clamp(1.0 - square, 0.0, 1.0);
}

// Adds a vignette shadow to the edges of the image
float vignette(vec2 uv){
	uv *= 1.0 - uv.xy;
	float vignette = uv.x * uv.y * 15.0;
	return pow(vignette, vignette_intensity * vignette_opacity);
}

void fragment()
{
	vec2 uv = overlay ? warp(SCREEN_UV) : warp(UV); // Warp the uv. uv will be used in most cases instead of UV to keep the warping
	vec2 text_uv = uv;
	vec2 roll_uv = vec2(0.0);
	float time = roll ? TIME : 0.0;
	

	// Pixelate the texture based on the given resolution.
	if (pixelate)
	{
		text_uv = ceil(uv * resolution) / resolution;
	}
	
	// Create the rolling effect. We need roll_line a bit later to make the noise effect.
	// That is why this runs if roll is true OR noise_opacity is over 0.
	float roll_line = 0.0;
	if (roll || noise_opacity > 0.0)
	{
		// Create the areas/lines where the texture will be distorted.
		roll_line = smoothstep(0.3, 0.9, sin(uv.y * roll_size - (time * roll_speed) ) );
		// Create more lines of a different size and apply to the first set of lines. This creates a bit of variation.
		roll_line *= roll_line * smoothstep(0.3, 0.9, sin(uv.y * roll_size * roll_variation - (time * roll_speed * roll_variation) ) );
		// Distort the UV where where the lines are
		roll_uv = vec2(( roll_line * distort_intensity * (1.-UV.x)), 0.0);
	}
	
	vec4 text;
	if (roll)
	{
		// If roll is true distort the texture with roll_uv. The texture is split up into RGB to 
		// make some chromatic aberration. We apply the aberration to the red and green channels accorging to the aberration parameter
		// and intensify it a bit in the roll distortion.
		text.r = texture(SCREEN_TEXTURE, text_uv + roll_uv * 0.8 + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv + roll_uv * 1.2 - vec2(aberration, 0.0) * .1 ).g;
		text.b = texture(SCREEN_TEXTURE, text_uv + roll_uv).b;
		text.a = 1.0;
	}
	else
	{
		// If roll is false only apply the aberration without any distorion. The aberration values are very small so the .1 is only 
		// to make the slider in the Inspector less sensitive.
		text.r = texture(SCREEN_TEXTURE, text_uv + vec2(aberration, 0.0) * .1).r;
		text.g = texture(SCREEN_TEXTURE, text_uv - vec2(aberration, 0.0) * .1).g;
		text.b = texture(SCREEN_TEXTURE, text_uv).b;
		text.a = 1.0;
	}
	
	float r = text.r;
	float g = text.g;
	float b = text.b;
	
	uv = warp(UV);
	
	// CRT monitors don't have pixels but groups of red, green and blue dots or lines, called grille. We isolate the texture's color channels 
	// and divide it up in 3 offsetted lines to show the red, green and blue colors next to each other, with a small black gap between.
	if (grille_opacity > 0.0){
		
		float g_r = smoothstep(0.85, 0.95, abs(sin(uv.x * (resolution.x * 3.14159265))));
		r = mix(r, r * g_r, grille_opacity);
		
		float g_g = smoothstep(0.85, 0.95, abs(sin(1.05 + uv.x * (resolution.x * 3.14159265))));
		g = mix(g, g * g_g, grille_opacity);
		
		float b_b = smoothstep(0.85, 0.95, abs(sin(2.1 + uv.x * (resolution.x * 3.14159265))));
		b = mix(b, b * b_b, grille_opacity);
		
	}
	
	// Apply the grille to the texture's color channels and apply Brightness. Since the grille and the scanlines (below) make the image very dark you
	// can compensate by increasing the brightness.
	text.r = clamp(r * brightness, 0.0, 1.0);
	text.g = clamp(g * brightness, 0.0, 1.0);
	text.b = clamp(b * brightness, 0.0, 1.0);
	
	// Scanlines are the horizontal lines that make up the image on a CRT monitor. 
	// Here we are actual setting the black gap between each line, which I guess is not the right definition of the word, but you get the idea  
	float scanlines = 0.5;
	if (scanlines_opacity > 0.0)
	{
		// Same technique as above, create lines with sine and applying it to the texture. Smoothstep to allow setting the line size.
		scanlines = smoothstep(scanlines_width, scanlines_width + 0.5, abs(sin(uv.y * (resolution.y * 3.14159265))));
		text.rgb = mix(text.rgb, text.rgb * vec3(scanlines), scanlines_opacity);
	}
	
	// Apply the banded noise.
	if (noise_opacity > 0.0)
	{
		// Generate a noise pattern that is very stretched horizontally, and animate it with noise_speed
		float noise = smoothstep(0.4, 0.5, noise(uv * vec2(2.0, 200.0) + vec2(10.0, (TIME * (noise_speed))) ) );
		
		// We use roll_line (set above) to define how big the noise should be vertically (multiplying cuts off all black parts).
		// We also add in some basic noise with random() to break up the noise pattern above. The noise is sized according to 
		// the resolution value set in the inspector. If you don't like this look you can 
		// change \"ceil(uv * resolution) / resolution\" to only \"uv\" to make it less pixelated. Or multiply resolution with som value
		// greater than 1.0 to make them smaller.
		roll_line *= noise * scanlines * clamp(random((ceil(uv * resolution) / resolution) + vec2(TIME * 0.8, 0.0)).x + 0.8, 0.0, 1.0);
		// Add it to the texture based on noise_opacity
		text.rgb = clamp(mix(text.rgb, text.rgb + roll_line, noise_opacity), vec3(0.0), vec3(1.0));
	}
	
	// Apply static noise by generating it over the whole screen in the same way as above
	if (static_noise_intensity > 0.0)
	{
		text.rgb += clamp(random((ceil(uv * resolution) / resolution) + fract(TIME)).x, 0.0, 1.0) * static_noise_intensity;
	}
	
	// Apply a black border to hide imperfections caused by the warping.
	// Also apply the vignette
	text.rgb *= border(uv);
	text.rgb *= vignette(uv);
	// Hides the black border and make that area transparent. Good if you want to add the the texture on top an image of a TV or monitor.
	if (clip_warp)
	{
		text.a = border(uv);
	}
	
	// Apply discoloration to get a VHS look (lower saturation and higher contrast)
	// You can play with the values below or expose them in the Inspector.
	float saturation = 0.5;
	float contrast = 1.2;
	if (discolor)
	{
		// Saturation
		vec3 greyscale = vec3(text.r + text.g + text.b) / 3.;
		text.rgb = mix(text.rgb, greyscale, saturation);
		
		// Contrast
		float midpoint = pow(0.5, 2.2);
		text.rgb = (text.rgb - vec3(midpoint)) * contrast + midpoint;
	}
	
	COLOR = text;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/overlay = true
shader_param/scanlines_opacity = 0.4
shader_param/scanlines_width = 0.25
shader_param/grille_opacity = 0.3
shader_param/resolution = Vector2( 640, 480 )
shader_param/pixelate = true
shader_param/roll = false
shader_param/roll_speed = 0.0
shader_param/roll_size = 0.0
shader_param/roll_variation = 1.8
shader_param/distort_intensity = 0.05
shader_param/noise_opacity = 0.4
shader_param/noise_speed = 5.0
shader_param/static_noise_intensity = 0.06
shader_param/aberration = 0.03
shader_param/brightness = 1.4
shader_param/discolor = true
shader_param/warp_amount = 1.0
shader_param/clip_warp = false
shader_param/vignette_intensity = 0.4
shader_param/vignette_opacity = 0.5

[sub_resource type="Curve" id=1]
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="ConvexPolygonShape2D" id=4]
points = PoolVector2Array( 21.2244, 31.8568, 11.1637, 32, 10.8611, 0.094101, 21.2244, 0 )

[sub_resource type="ConvexPolygonShape2D" id=5]
points = PoolVector2Array( 10.8931, 10.7265, 11.2968, 0.363266, 21.1217, 0.497864, 20.718, 18.8018, 17.0841, 20.6861, 0.664375, 21.4936, 0.12603, 11.2649 )

[sub_resource type="ConvexPolygonShape2D" id=6]
points = PoolVector2Array( 0.157951, 11.2649, 18.8657, 11.8032, 20.7499, 15.1679, 21.0191, 31.8568, 10.925, 31.7223, 11.1942, 21.4936, 0.427132, 20.9552 )

[sub_resource type="ConvexPolygonShape2D" id=7]
points = PoolVector2Array( 10.9569, 31.8568, 11.2261, 14.0912, 12.9757, 11.8032, 31.5489, 11.5341, 32, 21.2244, 21.051, 20.8206, 20.7818, 31.7223 )

[sub_resource type="ConvexPolygonShape2D" id=8]
points = PoolVector2Array( 21.3521, 0.228683, 21.2175, 10.7265, 31.9846, 11.6687, 31.7154, 21.359, 16.507, 20.9552, 12.2001, 19.7439, 11.3926, 0.228683 )

[sub_resource type="ConvexPolygonShape2D" id=9]
points = PoolVector2Array( 32, 20.8206, 0.388336, 20.8206, 0.388336, 11.2649, 32, 11.2649 )

[sub_resource type="TileSet" id=10]
0/name = "level_spritemap.png 0"
0/texture = ExtResource( 4 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 32, 32 )
0/tile_mode = 0
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 4 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 4 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0
1/name = "level_spritemap.png 1"
1/texture = ExtResource( 4 )
1/tex_offset = Vector2( 0, 0 )
1/modulate = Color( 1, 1, 1, 1 )
1/region = Rect2( 32, 0, 32, 32 )
1/tile_mode = 0
1/occluder_offset = Vector2( 0, 0 )
1/navigation_offset = Vector2( 0, 0 )
1/shape_offset = Vector2( 0, 0 )
1/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
1/shape = SubResource( 5 )
1/shape_one_way = false
1/shape_one_way_margin = 1.0
1/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 5 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
1/z_index = 0
2/name = "level_spritemap.png 2"
2/texture = ExtResource( 4 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 64, 0, 32, 32 )
2/tile_mode = 0
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape = SubResource( 6 )
2/shape_one_way = false
2/shape_one_way_margin = 1.0
2/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 6 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
2/z_index = 0
3/name = "level_spritemap.png 3"
3/texture = ExtResource( 4 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 96, 0, 32, 32 )
3/tile_mode = 0
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape = SubResource( 7 )
3/shape_one_way = false
3/shape_one_way_margin = 1.0
3/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 7 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
3/z_index = 0
4/name = "level_spritemap.png 4"
4/texture = ExtResource( 4 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 128, 0, 32, 32 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shape_offset = Vector2( 0, 0 )
4/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
4/shape = SubResource( 8 )
4/shape_one_way = false
4/shape_one_way_margin = 1.0
4/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 8 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
4/z_index = 0
5/name = "level_spritemap.png 5"
5/texture = ExtResource( 4 )
5/tex_offset = Vector2( 0, 0 )
5/modulate = Color( 1, 1, 1, 1 )
5/region = Rect2( 160, 0, 32, 32 )
5/tile_mode = 0
5/occluder_offset = Vector2( 0, 0 )
5/navigation_offset = Vector2( 0, 0 )
5/shape_offset = Vector2( 0, 0 )
5/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
5/shape = SubResource( 9 )
5/shape_one_way = false
5/shape_one_way_margin = 1.0
5/shapes = [ {
"autotile_coord": Vector2( 0, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 9 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
5/z_index = 0

[node name="World" type="Node2D"]
script = ExtResource( 3 )

[node name="Spaceship" parent="." groups=["SpaceShip"] instance=ExtResource( 1 )]
position = Vector2( 298, 271 )

[node name="Camera2D" type="Camera2D" parent="Spaceship"]
current = true

[node name="CanvasLayer" type="CanvasLayer" parent="Spaceship/Camera2D"]

[node name="HealthBar" type="ProgressBar" parent="Spaceship/Camera2D/CanvasLayer"]
margin_left = 48.0
margin_top = 32.0
margin_right = 143.0
margin_bottom = 46.0
rect_scale = Vector2( 2, 2 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_styles/fg = SubResource( 11 )
value = 100.0
script = ExtResource( 5 )

[node name="XPBar" type="ProgressBar" parent="Spaceship/Camera2D/CanvasLayer"]
margin_left = 560.0
margin_top = 32.0
margin_right = 655.0
margin_bottom = 46.0
rect_scale = Vector2( 2, 2 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
custom_styles/fg = SubResource( 12 )
script = ExtResource( 6 )

[node name="ColorRect2" type="ColorRect" parent="Spaceship/Camera2D/CanvasLayer"]
margin_right = 798.0
margin_bottom = 597.0
color = Color( 0.831373, 0.831373, 0.831373, 0.105882 )

[node name="ColorRect" type="ColorRect" parent="Spaceship/Camera2D/CanvasLayer"]
material = SubResource( 3 )
margin_right = 800.0
margin_bottom = 600.0

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]
motion_mirroring = Vector2( 800, 600 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="ParallaxBackground/ParallaxLayer"]
position = Vector2( 298, 271 )
amount = 100
lifetime = 14.76
preprocess = 15.0
emission_shape = 2
emission_rect_extents = Vector2( 800, 600 )
gravity = Vector2( 0, 0 )
scale_amount = 4.0
scale_amount_random = 1.0
scale_amount_curve = SubResource( 1 )

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 1.3, 1.3 )
motion_mirroring = Vector2( 800, 600 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="ParallaxBackground/ParallaxLayer2"]
position = Vector2( 298, 271 )
amount = 100
lifetime = 14.76
preprocess = 15.0
emission_shape = 2
emission_rect_extents = Vector2( 800, 600 )
gravity = Vector2( 0, 0 )
scale_amount = 2.0
scale_amount_curve = SubResource( 1 )

[node name="ParallaxLayer3" type="ParallaxLayer" parent="ParallaxBackground"]
motion_scale = Vector2( 1.6, 1.6 )
motion_mirroring = Vector2( 800, 600 )

[node name="CPUParticles2D" type="CPUParticles2D" parent="ParallaxBackground/ParallaxLayer3"]
position = Vector2( 298, 271 )
amount = 100
lifetime = 14.76
preprocess = 15.0
emission_shape = 2
emission_rect_extents = Vector2( 800, 600 )
gravity = Vector2( 0, 0 )
scale_amount = 2.0
scale_amount_curve = SubResource( 1 )

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 2 )
autoplay = true

[node name="TileMap" type="TileMap" parent="."]
tile_set = SubResource( 10 )
cell_size = Vector2( 32, 32 )
collision_layer = 16
collision_mask = 9
format = 1
tile_data = PoolIntArray( -917528, 3, 0, -917527, 5, 0, -917526, 5, 0, -917525, 5, 0, -917524, 5, 0, -917523, 5, 0, -917522, 5, 0, -917521, 5, 0, -917520, 5, 0, -917519, 5, 0, -917518, 5, 0, -917517, 5, 0, -917516, 5, 0, -917515, 5, 0, -917514, 5, 0, -917513, 5, 0, -917512, 5, 0, -917511, 5, 0, -917510, 5, 0, -917509, 5, 0, -917508, 5, 0, -917507, 5, 0, -917506, 5, 0, -917505, 5, 0, -983040, 5, 0, -983039, 5, 0, -983038, 5, 0, -983037, 5, 0, -983036, 5, 0, -983035, 5, 0, -983034, 5, 0, -983033, 5, 0, -983032, 5, 0, -983031, 5, 0, -983030, 5, 0, -983029, 5, 0, -983028, 5, 0, -983027, 5, 0, -983026, 5, 0, -983025, 5, 0, -983024, 5, 0, -983023, 5, 0, -983022, 5, 0, -983021, 5, 0, -983020, 5, 0, -983019, 5, 0, -983018, 5, 0, -983017, 5, 0, -983016, 5, 0, -983015, 5, 0, -983014, 5, 0, -983013, 5, 0, -983012, 5, 0, -983011, 5, 0, -983010, 5, 0, -983009, 5, 0, -983008, 5, 0, -983007, 5, 0, -983006, 5, 0, -983005, 5, 0, -983004, 5, 0, -983003, 5, 0, -983002, 5, 0, -983001, 5, 0, -983000, 5, 0, -982999, 5, 0, -982998, 5, 0, -982997, 5, 0, -982996, 5, 0, -982995, 5, 0, -982994, 2, 0, -851992, 0, 0, -917458, 0, 0, -786456, 0, 0, -851922, 0, 0, -720920, 0, 0, -786386, 0, 0, -655384, 0, 0, -720850, 0, 0, -589848, 0, 0, -655314, 0, 0, -524312, 0, 0, -589778, 0, 0, -458776, 0, 0, -524242, 0, 0, -393240, 0, 0, -458706, 0, 0, -327704, 0, 0, -393170, 0, 0, -262168, 0, 0, -327634, 0, 0, -196632, 0, 0, -262098, 0, 0, -131096, 0, 0, -196562, 0, 0, -65560, 0, 0, -131026, 0, 0, -24, 0, 0, -65490, 0, 0, 65512, 0, 0, 46, 0, 0, 131048, 0, 0, 65582, 0, 0, 196584, 0, 0, 131118, 0, 0, 262120, 0, 0, 196654, 0, 0, 327656, 0, 0, 262190, 0, 0, 393192, 0, 0, 327726, 0, 0, 458728, 0, 0, 393262, 0, 0, 524264, 0, 0, 458798, 0, 0, 589800, 0, 0, 524334, 0, 0, 655336, 0, 0, 589870, 0, 0, 720872, 0, 0, 655406, 0, 0, 786408, 0, 0, 720942, 0, 0, 851944, 0, 0, 786478, 0, 0, 917480, 0, 0, 852014, 0, 0, 983016, 0, 0, 917550, 0, 0, 1048552, 0, 0, 983086, 0, 0, 1114088, 0, 0, 1048622, 0, 0, 1179624, 0, 0, 1114158, 0, 0, 1245160, 0, 0, 1179694, 0, 0, 1310696, 0, 0, 1245230, 0, 0, 1376232, 0, 0, 1310766, 0, 0, 1441768, 0, 0, 1376302, 0, 0, 1507304, 0, 0, 1441838, 0, 0, 1572840, 0, 0, 1507374, 0, 0, 1638376, 0, 0, 1572910, 0, 0, 1703912, 0, 0, 1638446, 0, 0, 1769448, 0, 0, 1703982, 0, 0, 1834984, 0, 0, 1769518, 0, 0, 1900520, 0, 0, 1835054, 0, 0, 1966056, 0, 0, 1900590, 0, 0, 2031592, 0, 0, 1966126, 0, 0, 2097128, 4, 0, 2097129, 5, 0, 2097130, 5, 0, 2097131, 5, 0, 2097132, 5, 0, 2097133, 5, 0, 2097134, 5, 0, 2097135, 5, 0, 2097136, 5, 0, 2097137, 5, 0, 2097138, 5, 0, 2097139, 5, 0, 2097140, 5, 0, 2097141, 5, 0, 2097142, 5, 0, 2097143, 5, 0, 2097144, 5, 0, 2097145, 5, 0, 2097146, 5, 0, 2097147, 5, 0, 2097148, 5, 0, 2097149, 5, 0, 2097150, 5, 0, 2097151, 5, 0, 2031616, 5, 0, 2031617, 5, 0, 2031618, 5, 0, 2031619, 5, 0, 2031620, 5, 0, 2031621, 5, 0, 2031622, 5, 0, 2031623, 5, 0, 2031624, 5, 0, 2031625, 5, 0, 2031626, 5, 0, 2031627, 5, 0, 2031628, 5, 0, 2031629, 5, 0, 2031630, 5, 0, 2031631, 5, 0, 2031632, 5, 0, 2031633, 5, 0, 2031634, 5, 0, 2031635, 5, 0, 2031636, 5, 0, 2031637, 5, 0, 2031638, 5, 0, 2031639, 5, 0, 2031640, 5, 0, 2031641, 5, 0, 2031642, 5, 0, 2031643, 5, 0, 2031644, 5, 0, 2031645, 5, 0, 2031646, 5, 0, 2031647, 5, 0, 2031648, 5, 0, 2031649, 5, 0, 2031650, 5, 0, 2031651, 5, 0, 2031652, 5, 0, 2031653, 5, 0, 2031654, 5, 0, 2031655, 5, 0, 2031656, 5, 0, 2031657, 5, 0, 2031658, 5, 0, 2031659, 5, 0, 2031660, 5, 0, 2031661, 5, 0, 2031662, 1, 0 )
